{"version":3,"sources":["components/card.js","components/deck.js","components/bank.js","components/pot.js","components/home.js","App.js","index.js"],"names":["Card","props","id","card","value","suit","faceUp","opacity","alt","className","width","height","src","process","style","Deck","shuffle","deck","i","position1","Math","floor","random","length","position2","temp","this","num","j","push","finalDeck","concat","newDeck","burn","prototype","deal","pop","getDeck","getArray","money","hundreds","fiftys","twentyfives","fives","mArray","chips","Bank","bank","bet","allIn","clearBet","onClick","type","Pot","pot","pArray","chip","remove","color","Double","pots","hand","status","gameStatus","double","Action","hit","stand","initialState","deckInstance","handP1","handP2","handH","pot1","pot2","lastBet","split","op1","op2","Home","state","bind","getVal","sameVal","isSplit","nextRound","compareHand","revealHand","e","betMoney","parseInt","currentTarget","setState","slice","cardArr","hasAce","some","minVal","reduce","prev","curr","seenAce","maxVal","index","cards","Array","setTimeout","alert","newHand","newBank","newPot","newPArray","newCard","newBet","playerVal","dealerVal","handNum","a","actions","Promise","resolve","newDealerVal","P","handHVal","handP1Val","handP2Val","then","resp","newHand2","map","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a229f6b.chunk.js","sourcesContent":["import './card.css'\r\nimport React from 'react';\r\n\r\n\r\n// function that returns a playing card component.\r\nfunction Card(props) {\r\n    let id = props.card.value + props.card.suit;\r\n    let faceUp = props.card.faceUp;\r\n    let opacity = props.opacity;\r\n    return (faceUp)? (\r\n        <img alt='card' className=\"play-card\" width={61.5} height={87.8} src={process.env.PUBLIC_URL +\"/images/\"+id+\".png\"} style={{opacity: opacity}} ></img>\r\n    ) : (\r\n    <img alt='card' className=\"play-card\" width={61.5} height={87.8} src={process.env.PUBLIC_URL +\"/images/back.png\"} ></img>\r\n    );\r\n};\r\n\r\nexport default Card;","// function that acts as a class for deck of cards.\r\n\r\nfunction Deck(){\r\n    this.deck = newDeck();\r\n    this.burn = [];\r\n    this.shuffle = function(deck) {\r\n        shuffle(deck);\r\n    }\r\n    function newDeck() {\r\n        let suit = [\"d\", \"c\", \"h\", \"s\"];\r\n        let value = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\r\n        let num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10];\r\n        let deck = [];\r\n\r\n        for (let i = 0; i < suit.length; i++) {\r\n            for (let j = 0; j < value.length; j++) {\r\n                let card = { value: value[j], suit: suit[i], num: num[j] };\r\n                deck.push(card);\r\n            }\r\n        }\r\n        let finalDeck = deck.concat(deck);\r\n        shuffle(finalDeck);\r\n        return finalDeck;\r\n    }\r\n\r\n    function shuffle(deck) {\r\n        for (let i = 0; i < 1000; i++) {\r\n            let position1 = Math.floor((Math.random() * deck.length));\r\n            let position2 = Math.floor((Math.random() * deck.length));\r\n            let temp = deck[position1];\r\n\r\n            deck[position1] = deck[position2];\r\n            deck[position2] = temp;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nDeck.prototype.deal = function(faceUp) {\r\n        if (this.deck.length) {\r\n            let card = this.deck.pop();\r\n            this.burn.push(card);\r\n\r\n            return (faceUp)? {...card, faceUp: true} : {...card, faceUp: false};\r\n        }\r\n        else {\r\n            this.shuffle(this.burn);\r\n            this.deck = this.burn;\r\n            this.burn = [];\r\n            let card = this.deck.pop();\r\n            this.burn.push(card);\r\n\r\n            return (faceUp)? {...card, faceUp: true} : {...card, faceUp: false};\r\n        }\r\n    }\r\n\r\nDeck.prototype.getDeck = function() {\r\n        return this.deck; //this.deck;\r\n    }\r\n    \r\n\r\n    \r\n\r\n\r\nexport default Deck;","import './bank.css';\r\n\r\n\r\n// function that outputs array of vlaues where each value is the worth of a chip in a stack of chips.\r\nexport let getArray = (money) =>{\r\n\r\n    let hundreds = Math.floor(money / 100);\r\n    money -= hundreds * 100;\r\n    let fiftys = Math.floor(money / 50);\r\n    money -= fiftys * 50;\r\n    let twentyfives = Math.floor(money / 25);\r\n    money -= twentyfives * 25;\r\n    let fives = Math.floor(money / 5);\r\n    money -= fives * 5;\r\n    let ones = money;\r\n\r\n    let mArray = [];\r\n    let chips = [hundreds, fiftys, twentyfives, fives, ones];\r\n    let value = [100, 50, 25, 5, 1];\r\n\r\n    for (let i = 0; i < chips.length; i++) {\r\n        for (let j = 0; j < chips[i]; j++) {\r\n            mArray.push(value[i]);\r\n        }\r\n    }\r\n\r\n    return mArray;\r\n}\r\n\r\n// function returns the bank component of the game.\r\nfunction Bank(props) {\r\n\r\n    let bank = props.bank;\r\n    let width = 82.5;\r\n    let height = 75;\r\n    let bet = props.bet;\r\n    let allIn = props.allIn;\r\n    let clearBet = props.clearBet;\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"bank-total col-4\">\r\n                <div className=\"bank-total-text\">\r\n                    <b>Bank:</b> ${bank}\r\n                </div>\r\n                <div className=\"bank-all-in\">\r\n                    {(bank > 0) ? (<button className=\"all-in-button btn btn-success\" onClick={allIn}>\r\n                        ALL IN\r\n                    </button>) : (<button className=\"all-in-button btn btn-success\" onClick={clearBet}>\r\n                        CLEAR BET\r\n                    </button>)}\r\n                </div>\r\n            </div>\r\n            {(bank > 0) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/1.png\"} width={width} height={height} value={1} onClick={bet} className=\"chip btn\"></input>\r\n            </div>) : null}\r\n            {(bank >= 5) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/5.png\"} width={width} height={height} value={5} onClick={bet} className=\"chip btn\"></input>\r\n            </div>) : null}\r\n            {(bank >= 25) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/25.png\"} width={width} height={height} value={25} onClick={bet} className=\"chip btn\"></input>\r\n            </div>) : null}\r\n            {(bank >= 50) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/50.png\"} width={width} height={height} value={50} onClick={bet} className=\"chip btn\"></input>\r\n            </div>) : null}\r\n            {(bank >= 100) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/100.png\"} width={width} height={height} value={100} onClick={bet} className=\"chip-1 btn\"></input>\r\n            </div>) : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Bank;\r\n","import './pot.css';\r\n\r\n// returns a coponent showing the stack of chips and thier total value.\r\nfunction Pot(props) {\r\n\r\n    let pot = props.pot;\r\n    let pArray = props.pArray;\r\n    let chip = pArray[pArray.length - 1];\r\n    let width = 82.5;\r\n    let height = 75;\r\n    let remove = props.remove;\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"pot-title col-6\">\r\n                <b>Pot:</b> ${pot}\r\n            </div>\r\n            {(pArray.length) ? (<div className=\"pot-chip col-6\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/\" + chip + \".png\"} width={width} height={height} value={chip} onClick={remove} className=\"chip btn\"></input>\r\n            </div>) : <div className=\"col-6\">\r\n                <div className=\"empty-pot\" style={{color: \"white\"}}> YOUR POT <br/>HERE</div>\r\n            </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Pot;","import React from 'react';\r\nimport './home.css';\r\nimport Card from './card';\r\nimport Deck from './deck';\r\nimport Bank from './bank';\r\nimport Pot from './pot';\r\nimport { getArray } from './bank';\r\n\r\n// function that returns the Double button component.\r\nfunction Double(props) {\r\n    let pots = props.pots;\r\n    let hand = props.hand;\r\n    let status = props.gameStatus.hand;\r\n    if (pots[status] <= props.bank && hand[\"handP\" + status].length === 2) {\r\n        return (\r\n            <button className=\"btn btn-success col-4\" onClick={props.double} >(2X)Double </button>\r\n        )\r\n    }\r\n    else return null;\r\n}\r\n\r\n// function that returns the set of Hit, Double and Stand button components.\r\nfunction Action(props) {\r\n    if (props.deal) {\r\n        return (\r\n            <><button className=\"btn btn-success col-3\" onClick={props.hit}><i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i> Hit</button> <Double pots={props.pots} gameStatus={props.gameStatus} hand={props.hand} bank={props.bank} double={props.double} /> <button className=\"btn btn-success col-4\" onClick={props.stand}><i className=\"fa fa-hand-paper-o\" aria-hidden=\"true\"></i> Stand </button></>\r\n        )\r\n    }\r\n    else return null;\r\n}\r\n\r\n// initial state of the game.\r\nlet initialState = {\r\n    deckInstance: new Deck(),\r\n    hand: { handP1: [], handP2: [], handH: [] },\r\n    bank: 900,\r\n    pot1: 100,\r\n    pot2: 0,\r\n    lastBet: 100,\r\n    pArray: [100],\r\n    gameStatus: {\r\n        deal: false,\r\n        split: false,\r\n        hand: 1,\r\n        op1: 1,\r\n        op2: 1,\r\n    }\r\n};\r\n\r\n// main component of the game\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = initialState;\r\n        this.deal = this.deal.bind(this);\r\n        this.getVal = this.getVal.bind(this);\r\n        this.sameVal = this.sameVal.bind(this);\r\n        this.isSplit = this.isSplit.bind(this);\r\n        this.split = this.split.bind(this);\r\n        this.nextRound = this.nextRound.bind(this);\r\n        this.compareHand = this.compareHand.bind(this);\r\n        this.revealHand = this.revealHand.bind(this);\r\n        this.hit = this.hit.bind(this);\r\n        this.bet = this.bet.bind(this);\r\n        this.allIn = this.allIn.bind(this);\r\n        this.clearBet = this.clearBet.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.stand = this.stand.bind(this);\r\n        this.double = this.double.bind(this);\r\n    }\r\n\r\n    // method used to bet money from the bank.\r\n    bet(e) {\r\n        let betMoney = parseInt(e.currentTarget.value);\r\n        this.setState((state, props) => ({ ...state, bank: (state.bank - betMoney), pot1: (state.pot1 + betMoney), pArray: [...state.pArray, betMoney] }));\r\n    }\r\n\r\n    // method used to bet all money in the bank.\r\n    allIn() {\r\n        this.setState((state, props) => ({ ...state, bank: 0, pot1: (state.pot1 + state.bank), pArray: getArray(state.pot1 + state.bank) }));\r\n    }\r\n\r\n    // method used to put all money from the pot in the bank.\r\n    clearBet() {\r\n        this.setState((state, props) => ({ ...state, bank: (state.pot1 + state.bank), pot1: 0, pArray: [] }));\r\n    }\r\n\r\n    // method used to remove individual chip from the pot and into bank.\r\n    remove() {\r\n        let chip = this.state.pArray[this.state.pArray.length - 1];\r\n        this.setState((state, props) => ({ ...state, bank: (chip + state.bank), pot1: (state.pot1 - chip), pArray: state.pArray.slice(0, -1) }));\r\n    }\r\n\r\n    // method used to calculate the total of a give hand array.\r\n    getVal(cardArr) {\r\n\r\n        let hasAce = cardArr.some(card => {\r\n            return card.num === 1;\r\n        })\r\n        let minVal = cardArr.reduce((prev, curr) => {\r\n            return { num: prev.num + curr.num };\r\n        })\r\n\r\n        if (!hasAce) return minVal.num;\r\n        else {\r\n            let seenAce = false;\r\n            let maxVal = cardArr.reduce((prev, curr, index) => {\r\n                if (index === 1 && prev.num === 1) {\r\n                    seenAce = true;\r\n                    return { num: 11 + curr.num };\r\n                }\r\n                if (curr.num !== 1 || seenAce) return { num: prev.num + curr.num };\r\n                else {\r\n                    seenAce = true;\r\n                    return { num: prev.num + 11 };\r\n                }\r\n            });\r\n            return (maxVal.num <= 21) ? maxVal.num : minVal.num;\r\n        }\r\n    }\r\n\r\n    // method used to check if a pair of cards have equal value.\r\n    sameVal(hand) {\r\n        return hand[0].num === hand[1].num;\r\n    }\r\n\r\n    // method used to check id split hand exists or not.\r\n    isSplit() {\r\n        return this.state.gameStatus.deal && this.state.gameStatus.split === false && this.state.bank >= this.state.pot1 && this.state.hand.handP1.length === 2 && this.state.hand.handP2.length === 0 && this.sameVal(this.state.hand.handP1);\r\n    }\r\n\r\n    // method used to deal cards at the beginning of a round.\r\n    deal() {\r\n        if (this.state.deckInstance.getDeck().length < 56) {\r\n            this.setState((state, props) => ({ ...state, deckInstance: new Deck() }), () => {\r\n                let cards = new Array(this.state.deckInstance.deal(true), this.state.deckInstance.deal(false), this.state.deckInstance.deal(true), this.state.deckInstance.deal(true));\r\n\r\n                this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: [cards[0], cards[2]], handH: [cards[1], cards[3]] }, gameStatus: { ...state.gameStatus, deal: true }, lastBet: state.pot1 }), () => {\r\n                    if (this.getVal([cards[0], cards[2]]) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(\"BLACKJACK!!\");\r\n                            this.revealHand();\r\n                        }, 500)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        else {\r\n            let cards = new Array(this.state.deckInstance.deal(true), this.state.deckInstance.deal(false), this.state.deckInstance.deal(true), this.state.deckInstance.deal(true));\r\n\r\n            this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: [cards[0], cards[2]], handH: [cards[1], cards[3]] }, gameStatus: { ...state.gameStatus, deal: true }, lastBet: state.pot1 }), () => {\r\n                if (this.getVal([cards[0], cards[2]]) === 21) {\r\n                    setTimeout(() => {\r\n                        alert(\"BLACKJACK!!\");\r\n                        this.revealHand();\r\n                    }, 500)\r\n                }\r\n            })\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // method used to split hands when a pair of cards in a hand have the same value.\r\n    split() {\r\n\r\n        let newHand = { ...this.state.hand, handP1: [this.state.hand.handP1[0]], handP2: [this.state.hand.handP1[1]] };\r\n        let newBank = this.state.bank - this.state.pot1;\r\n        let newPot = this.state.pot1;\r\n        let newPArray = this.state.pArray.concat(getArray(this.state.pot1));\r\n\r\n        this.setState((state, props) => ({ ...state, hand: newHand, bank: newBank, pot2: newPot, pArray: newPArray, gameStatus: { ...state.gameStatus, split: true, op2: 0.5 } }), () => {\r\n            setTimeout(() => {\r\n                let newCard = this.state.deckInstance.deal(true);\r\n                this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: [...state.hand.handP1, newCard] } }), () => {\r\n                    if (this.getVal(this.state.hand.handP1) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(\"BLACKJACK!!\");\r\n                            let newCard = this.state.deckInstance.deal(true);\r\n                            this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                    alert(\"BLACKJACK!!\");\r\n                                    this.revealHand();\r\n                                }\r\n                            });\r\n                        }, 500)\r\n                    }\r\n                })\r\n            }, 500)\r\n        })\r\n    }\r\n\r\n    // method used to go to the next round.\r\n    nextRound() {\r\n        if (this.state.bank === 0) {\r\n            alert(\"Game Over!!\");\r\n            this.setState({ ...initialState, deckInstance: new Deck() });\r\n        }\r\n        else {\r\n\r\n            let newBet = (this.state.lastBet <= this.state.bank) ? this.state.lastBet : this.state.bank;\r\n            let pArray = getArray(newBet);\r\n            let newBank = this.state.bank - newBet;\r\n            this.setState((state, props) => ({ ...state, hand: { ...initialState.hand }, pot1: newBet, pot2: 0, bank: newBank, pArray: pArray, gameStatus: { ...initialState.gameStatus } }))\r\n        }\r\n    }\r\n\r\n    // method used to compare a pair of hands.\r\n    async compareHand(playerVal, dealerVal, handNum) {\r\n        let pots = { 1: this.state.pot1, 2: this.state.pot2 };\r\n        let actions = { 1: \"1\", 2: \"2\" };\r\n        let P = await new Promise((resolve) => {\r\n            if (dealerVal > playerVal) {\r\n                if (dealerVal <= 21) {\r\n                    alert(`Dealer wins against Hand${handNum}! You lose $${pots[handNum]}!`);\r\n                    this.setState((state, props) => ({ ...state, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                    return resolve(\"loss\");\r\n                }\r\n                else {\r\n                    alert(`Dealer BUST! You win $${pots[handNum]} for Hand ${handNum}!`);\r\n                    let newBank = this.state.bank + (2 * pots[handNum]);\r\n                    this.setState((state, props) => ({ ...state, bank: newBank, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                    return resolve(\"dealer bust you win\");\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (dealerVal < 17) {\r\n                    let newHand = this.state.hand.handH.concat([this.state.deckInstance.deal(true)]);\r\n                    this.setState((state, props) => ({ ...state, hand: { ...state.hand, handH: newHand } }), () => {\r\n                        setTimeout(() => {\r\n                            let newDealerVal = this.getVal(newHand);\r\n                            if (newDealerVal > 21) {\r\n                                alert(`Dealer BUST! You win $${pots[handNum]} for Hand ${handNum}!`);\r\n                                let newBank = this.state.bank + (2 * pots[handNum]);\r\n                                this.setState((state, props) => ({ ...state, bank: newBank, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                                return resolve(\"dealer bust you win\");\r\n                            }\r\n                            else {\r\n                                return resolve(this.compareHand(playerVal, newDealerVal, handNum));\r\n                            }\r\n                        }, 500)\r\n\r\n                    });\r\n\r\n                }\r\n                else if (dealerVal === playerVal) {\r\n                    alert(`It's a push/tie for Hand ${handNum}! You keep $${pots[handNum]}!`);\r\n                    let newBank = this.state.bank + pots[handNum];\r\n                    this.setState((state, props) => ({ ...state, bank: newBank, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                    return resolve(\"tie\");\r\n                }\r\n                else {\r\n                    alert(`You win $${pots[handNum]} for Hand ${handNum}!`);\r\n                    let newBank = this.state.bank + (2 * pots[handNum]);\r\n                    this.setState((state, props) => ({ ...state, bank: newBank, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                    return resolve(\"win\");\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n        return P;\r\n    }\r\n\r\n    // method used to trigger the revealing of dealers hands followed by hand comparison.\r\n    revealHand() {\r\n        this.setState((state, props) =>\r\n            ({ ...state, hand: { ...state.hand, handH: [{ ...state.hand.handH[0], faceUp: true }, state.hand.handH[1]] } }), () => {\r\n\r\n                let handHVal = this.getVal(this.state.hand.handH);\r\n                let handP1Val = this.getVal(this.state.hand.handP1);\r\n                let handP2Val = (this.state.hand.handP2.length) ? this.getVal(this.state.hand.handP2) : 0;\r\n\r\n                setTimeout(() => {\r\n                    if (this.state.gameStatus.split) {\r\n                        if (this.state.pot1 === 0) {\r\n                            this.compareHand(handP2Val, handHVal, 2).then((resp) => {\r\n                                this.nextRound();\r\n                            });\r\n                        }\r\n                        else if (this.state.pot2 === 0) {\r\n                            this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, op2: 0.5, op1: 1 } }), () => {\r\n                                this.compareHand(handP1Val, handHVal, 1).then((resp) => {\r\n                                    this.nextRound();\r\n                                });\r\n                            })\r\n                        }\r\n                        else {\r\n                            this.compareHand(handP2Val, handHVal, 2).then(() => {\r\n                                handHVal = this.getVal(this.state.hand.handH);\r\n                                this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, op2: 0.5, op1: 1 } }), () => {\r\n                                    setTimeout(() => {\r\n                                        this.compareHand(handP1Val, handHVal, 1).then((resp) => {\r\n                                            this.nextRound();\r\n                                        });\r\n                                    }, 500)\r\n                                })\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.compareHand(handP1Val, handHVal, 1).then((resp) => {\r\n                            this.nextRound();\r\n                        });\r\n                    }\r\n                }, 500)\r\n            });\r\n    }\r\n\r\n    // method used to hit a palyer's hand with a card.\r\n    hit() {\r\n        if (this.state.gameStatus.split) {\r\n            if (this.state.gameStatus.hand === 1) {\r\n                let newHand = this.state.hand.handP1.concat([this.state.deckInstance.deal(true)]);\r\n                this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: newHand } }), () => {\r\n                    if (this.getVal(newHand) > 21) {\r\n                        setTimeout(() => {\r\n                            alert(`Hand 1 BUST! You lose $${this.state.pot1}!`);\r\n                            let newCard = this.state.deckInstance.deal(true);\r\n                            this.setState((state, props) => ({ ...state, pot1: 0, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                    setTimeout(() => {\r\n                                        alert(\"BLACKJACK!!\");\r\n                                        this.revealHand();\r\n                                    }, 500)\r\n                                }\r\n                            })\r\n                        }, 500)\r\n\r\n                    }\r\n                    else if (this.getVal(newHand) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(`You hit 21!`);\r\n                            let newCard = this.state.deckInstance.deal(true);\r\n                            this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                    setTimeout(() => {\r\n                                        alert(\"BLACKJACK!!\");\r\n                                        this.revealHand();\r\n                                    }, 500)\r\n                                }\r\n                            })\r\n                        }, 500)\r\n                    }\r\n                });\r\n\r\n            }\r\n            else if (this.state.gameStatus.hand === 2) {\r\n                let newHand2 = this.state.hand.handP2.concat([this.state.deckInstance.deal(true)]);\r\n                this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP2: newHand2 } }), () => {\r\n                    if (this.getVal(newHand2) > 21) {\r\n                        setTimeout(() => {\r\n                            alert(`Hand 2 BUST! You lose $${this.state.pot2}!`);\r\n                            this.setState((state, props) => ({ ...state, pot2: 0 }), () => {\r\n                                if (this.state.pot1) {\r\n                                    this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, op1: 1, op2: 0.5 } }), () => {\r\n                                        this.revealHand();\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    this.nextRound();\r\n                                }\r\n                            })\r\n                        }, 500)\r\n\r\n                    }\r\n                    else if (this.getVal(newHand2) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(`You hit 21!`);\r\n                            this.revealHand();\r\n                        }, 500)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else if (this.state.gameStatus.split === false) {\r\n            let newHand = this.state.hand.handP1.concat([this.state.deckInstance.deal(true)]);\r\n            this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: newHand } }), () => {\r\n                if (this.getVal(newHand) > 21) {\r\n                    setTimeout(() => {\r\n                        alert(`Hand 1 BUST! You lose $${this.state.pot1}!`);\r\n                        this.setState((state, props) => ({ ...state, pot1: 0 }), () => {\r\n                            this.nextRound();\r\n                        });\r\n                    }, 500)\r\n                }\r\n                else if (this.getVal(newHand) === 21) {\r\n                    setTimeout(() => {\r\n                        alert(`You hit 21!`);\r\n                        this.revealHand();\r\n                    }, 500)\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // method used to end addition of a card to a hand.\r\n    stand() {\r\n        if (!this.state.gameStatus.split) {\r\n            this.revealHand();\r\n        }\r\n        else {\r\n            if (this.state.gameStatus.hand === 2) this.revealHand();\r\n            else {\r\n                let newCard = this.state.deckInstance.deal(true);\r\n                this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                    if (this.getVal(this.state.hand.handP2) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(\"BLACKJACK!!\");\r\n                            this.revealHand();\r\n                        }, 500)\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // method used to double down on a hand.\r\n    double() {\r\n        if (this.state.gameStatus.split) {\r\n            if (this.state.gameStatus.hand === 1) {\r\n                let newCard = this.state.deckInstance.deal(true);\r\n                let newPot = 2 * this.state.pot1;\r\n                let newBank = this.state.bank - this.state.pot1;\r\n                this.setState((state, props) => ({ ...state, pot1: newPot, bank: newBank, hand: { ...state.hand, handP1: [...state.hand.handP1, newCard] } }), () => {\r\n                    if (this.getVal(this.state.hand.handP1) >= 21) {\r\n                        setTimeout(() => {\r\n                            if (this.getVal(this.state.hand.handP1) > 21) {\r\n                                alert(`Hand 1 BUST! You lose $${this.state.pot1}!`);\r\n                                let newCard = this.state.deckInstance.deal(true);\r\n                                this.setState((state, props) => ({ ...state, pot1: 0, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                    if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                        setTimeout(() => {\r\n                                            alert(\"BLACKJACK!!\");\r\n                                            this.revealHand();\r\n                                        }, 500)\r\n                                    }\r\n                                })\r\n                            }\r\n                            else if (this.getVal(this.state.hand.handP1) === 21) {\r\n                                alert(`You hit 21!`);\r\n                                let newCard = this.state.deckInstance.deal(true);\r\n                                this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                    if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                        setTimeout(() => {\r\n                                            alert(\"BLACKJACK!!\");\r\n                                            this.revealHand();\r\n                                        }, 500)\r\n                                    }\r\n                                })\r\n                            }\r\n                        }, 500)\r\n                    }\r\n                    else {\r\n                        let newCard = this.state.deckInstance.deal(true);\r\n                        this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                            if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                setTimeout(() => {\r\n                                    alert(\"BLACKJACK!!\");\r\n                                    this.revealHand();\r\n                                }, 500)\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            else if (this.state.gameStatus.hand === 2) {\r\n                let newCard = this.state.deckInstance.deal(true);\r\n                let newPot = 2 * this.state.pot2;\r\n                let newBank = this.state.bank - this.state.pot2;\r\n                this.setState((state, props) => ({ ...state, pot2: newPot, bank: newBank, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                    if (this.getVal(this.state.hand.handP2) >= 21) {\r\n                        setTimeout(() => {\r\n                            if (this.getVal(this.state.hand.handP2) > 21) {\r\n                                alert(`Hand 2 BUST! You lose $${this.state.pot2}!`);\r\n                                this.setState((state, props) => ({ ...state, pot2: 0 }), () => {\r\n                                    if (this.state.pot1) {\r\n                                        this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, op1: 1, op2: 0.5 } }), () => {\r\n                                            this.revealHand();\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        this.nextRound();\r\n                                    }\r\n                                })\r\n                            }\r\n                            else if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                alert(`You hit 21!`);\r\n                                this.revealHand();\r\n                            }\r\n                        }, 500)\r\n                    }\r\n                    else {\r\n                        setTimeout(() => {\r\n                            this.revealHand();\r\n                        }, 500)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else if (!this.state.gameStatus.split) {\r\n            let newCard = this.state.deckInstance.deal(true);\r\n            let newPot = 2 * this.state.pot1;\r\n            let newBank = this.state.bank - this.state.pot1;\r\n            this.setState((state, props) => ({ ...state, pot1: newPot, bank: newBank, hand: { ...state.hand, handP1: [...state.hand.handP1, newCard] } }), () => {\r\n                if (this.getVal(this.state.hand.handP1) >= 21) {\r\n                    setTimeout(() => {\r\n                        if (this.getVal(this.state.hand.handP1) > 21) {\r\n                            alert(`Hand 1 BUST! You lose $${this.state.pot1}!`);\r\n                            this.setState((state, props) => ({ ...state, pot1: 0 }), () => {\r\n                                this.nextRound();\r\n                            })\r\n                        }\r\n                        else if (this.getVal(this.state.hand.handP1) === 21) {\r\n                            alert(`You hit 21!`);\r\n                            this.revealHand();\r\n                        }\r\n                    }, 500)\r\n                }\r\n                else {\r\n                    setTimeout(() => {\r\n                        this.revealHand();\r\n                    }, 500)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        // methods that return a set of cards for player's hands and dealers hand given hand arrays.\r\n        let handP1 = this.state.hand.handP1.map((card, i) => {\r\n            return (\r\n                <Card card={card} key={i + 'p0card'} opacity={this.state.gameStatus.op1} />\r\n            )\r\n        });\r\n        let handP2 = this.state.hand.handP2.map((card, i) => {\r\n            return (\r\n                <Card card={card} key={i + 'p1card'} opacity={this.state.gameStatus.op2} />\r\n            )\r\n        });\r\n        let handH = this.state.hand.handH.map((card, i) => {\r\n            return (\r\n                <Card card={card} key={i + 'p1card'} />\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div className=\"home container\">\r\n                <div className=\"home-items\">\r\n                    <div className=\"deck-row row\">\r\n                        <div className=\"game-banner col-7\">\r\n                            <img alt=\"game banner\" height={35} width={180} src={process.env.PUBLIC_URL + \"/images/banner.png\"} />\r\n                        </div>\r\n                        <div className=\"deck-pic col-2\">\r\n                            <img alt=\"deck dummy\" width={30} height={35} src={process.env.PUBLIC_URL + \"/images/dummy.png\"} />\r\n                        </div>\r\n                        <div className=\"total-number col-3\" style={{ color: \"white\" }}>\r\n                            {this.state.deckInstance.getDeck().length}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dealer-hand-row row\">\r\n                        <div className=\"dealer-hand-title col-12\">\r\n                            DEALER'S HAND\r\n                        </div>\r\n                        <div className=\"dealer-hand-card col-6\">\r\n                            <div className=\"dealer-cards\" style={{ width: 61.5 + (this.state.hand.handH.length - 1) * 11.5 }}>{handH}</div>\r\n                            {(this.state.hand.handH.length && this.state.hand.handH[0].faceUp) ? (<div className=\"dealer-hand-total\">\r\n                                TOTAL: {this.getVal(this.state.hand.handH)}\r\n                            </div>) : null}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"player-hand-row row\">\r\n                        <div className=\"player-hand-title col-12\">\r\n                            PLAYER'S HAND\r\n                        </div>\r\n                        <div className=\"player-hand-card col-6\">\r\n                            {handP1}\r\n                            {(this.state.hand.handP1.length) ? (<div className=\"player-hand-total\">\r\n                                TOTAL: {this.getVal(this.state.hand.handP1)}\r\n                            </div>) : null}\r\n                            {(this.state.hand.handP1.length) ? (<div className=\"player-hand-value\">\r\n                                VALUE: {(this.getVal(this.state.hand.handP1) <= 21) ? <span>${this.state.pot1}</span> : <span>BUST!</span>}\r\n                            </div>) : null}\r\n                        </div>\r\n                        <div className=\"player-hand-card col-6\">\r\n                            {handP2}\r\n                            {(this.state.hand.handP2.length) ? (<div className=\"player-hand-total\">\r\n                                TOTAL: {this.getVal(this.state.hand.handP2)}\r\n                            </div>) : null}\r\n                            {(this.state.hand.handP2.length) ? (<div className=\"player-hand-value\">\r\n                                VALUE: {(this.getVal(this.state.hand.handP2) <= 21) ? <span>${this.state.pot2}</span> : <span>BUST!</span>}\r\n                            </div>) : null}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"action-row row\">\r\n                        {(!this.state.gameStatus.deal && this.state.pot1) ? (<button className=\"btn btn-info col-3\" onClick={this.deal}>Deal</button>) : null}\r\n                        <Action pots={{ 1: this.state.pot1, 2: this.state.pot2 }} gameStatus={this.state.gameStatus} hand={this.state.hand} bank={this.state.bank} deal={this.state.gameStatus.deal} hit={this.hit} stand={this.stand} double={this.double} />\r\n                        {(this.isSplit()) ? <button className=\"splt-btn btn btn-success col-7\" onClick={this.split} >Split</button> : null}\r\n                    </div>\r\n                    <div className=\"pot-row row\">\r\n                        {(!this.state.gameStatus.deal) ? (<Pot bank={this.state.bank} pot={this.state.pot1} pArray={this.state.pArray} remove={this.remove} />) :\r\n                            <>\r\n                                <div className=\"pot-title col-4\">\r\n                                    <b>Pot:</b> ${this.state.pot1 + this.state.pot2}\r\n                                </div>\r\n                                <div className=\"bank-total-text col-4\">\r\n                                    <b>Bank:</b> ${this.state.bank}\r\n                                </div>\r\n                            </>}\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer row\">\r\n                    {(!this.state.gameStatus.deal) ? (<Bank bank={this.state.bank} pot={this.state.pot1} pArray={this.state.pArray} allIn={this.allIn} clearBet={this.clearBet} bet={this.bet} />) :\r\n                        null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import './App.css';\r\nimport Home from './components/home';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <Home />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/deck.js","components/stateSlice.js","redux/ActionTypes.js","components/card.js","components/bank.js","components/pot.js","redux/reducer.js","redux/configureStore.js","components/home.js","components/home2.js","App.js","components/store.js","index.js"],"names":["Deck","shuffle","deck","i","position1","Math","floor","random","length","position2","temp","this","suit","value","num","j","card","push","finalDeck","concat","newDeck","burn","prototype","deal","faceUp","pop","getDeck","deckInstance","initialState","deckArray","hand","handP1","handP2","handH","bank","pot1","pot2","pArray","gameStatus","split","asyncBank","createAsyncThunk","load","thunkAPI","a","Promise","resolve","reject","dispatch","updateBank","stateSlice","createSlice","name","reducers","updateDeckArray","state","action","payload","dealHand","updatePot1","updatePot2","updatePArray","updateStatus","updateSplit","updateHand","flipCard","resetState","extraReducers","builder","addCase","fulfilled","actions","UPDATE_BANK","Card","props","id","opacity","alt","className","width","height","src","process","style","getArray","money","hundreds","fiftys","twentyfives","fives","mArray","chips","Bank","bet","allIn","clearBet","onClick","type","Pot","pot","chip","remove","color","Reducer","newBank","ActionTypes","ConfigureStore","createStore","applyMiddleware","thunk","Home","Double","pots","status","double","Action","hit","stand","lastBet","op1","op2","Home2","bind","getVal","sameVal","isSplit","nextRound","compareHand","revealHand","e","betMoney","parseInt","currentTarget","setState","slice","cardArr","hasAce","some","minVal","reduce","prev","curr","seenAce","maxVal","index","cards","Array","setTimeout","alert","newHand","newPot","newPArray","newCard","newBet","playerVal","dealerVal","handNum","newDealerVal","P","handHVal","handP1Val","handP2Val","then","resp","newHand2","map","React","Component","App","configureStore","reducer","black","stateReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.219f6682.chunk.js","sourcesContent":["function Deck(){\r\n    this.deck = newDeck();\r\n    this.burn = [];\r\n    this.shuffle = function(deck) {\r\n        shuffle(deck);\r\n    }\r\n    function newDeck() {\r\n        let suit = [\"d\", \"c\", \"h\", \"s\"];\r\n        let value = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\r\n        let num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10];\r\n        let deck = [];\r\n\r\n        for (let i = 0; i < suit.length; i++) {\r\n            for (let j = 0; j < value.length; j++) {\r\n                let card = { value: value[j], suit: suit[i], num: num[j] };\r\n                deck.push(card);\r\n            }\r\n        }\r\n        let finalDeck = deck.concat(deck);\r\n        shuffle(finalDeck);\r\n        return finalDeck;\r\n    }\r\n\r\n    function shuffle(deck) {\r\n        for (let i = 0; i < 1000; i++) {\r\n            let position1 = Math.floor((Math.random() * deck.length));\r\n            let position2 = Math.floor((Math.random() * deck.length));\r\n            let temp = deck[position1];\r\n\r\n            deck[position1] = deck[position2];\r\n            deck[position2] = temp;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nDeck.prototype.deal = function(faceUp) {\r\n        if (this.deck.length) {\r\n            let card = this.deck.pop();\r\n            this.burn.push(card);\r\n\r\n            return (faceUp)? {...card, faceUp: true} : {...card, faceUp: false};\r\n        }\r\n        else {\r\n            this.shuffle(this.burn);\r\n            this.deck = this.burn;\r\n            this.burn = [];\r\n            let card = this.deck.pop();\r\n            this.burn.push(card);\r\n\r\n            return (faceUp)? {...card, faceUp: true} : {...card, faceUp: false};\r\n        }\r\n    }\r\n\r\nDeck.prototype.getDeck = function() {\r\n        return this.deck; //this.deck;\r\n    }\r\n    \r\n\r\n    \r\n\r\n\r\nexport default Deck;","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport Deck from './deck';\r\n\r\n\r\n\r\nexport let deckInstance = new Deck();\r\nconst initialState = {\r\n    // deckInstance: new Deck(),\r\n    deckArray: [...deckInstance.getDeck()],\r\n    hand: { handP1: [], handP2: [], handH: [] },\r\n    bank: 900,\r\n    pot1: 100,\r\n    pot2: 0,\r\n    pArray: [100],\r\n    gameStatus: {\r\n        deal: false,\r\n        split: false,\r\n        hand: 1,\r\n    }\r\n};\r\n\r\nexport const asyncBank = createAsyncThunk(\r\n    'black/asyncBank',\r\n    async (load, thunkAPI) => {\r\n        return new Promise ((resolve, reject) => {\r\n            thunkAPI.dispatch(updateBank(load));\r\n            resolve();\r\n        })\r\n        \r\n        \r\n    }\r\n)\r\n\r\nexport const stateSlice = createSlice({\r\n    name: 'black',\r\n    initialState,\r\n    reducers: {\r\n        updateDeckArray: (state, action) => {\r\n            state.deckArray = action.payload;\r\n        },\r\n        dealHand: (state, action) => {\r\n            state.hand = {...state.hand, handP1: [action.payload[0], action.payload[2]], handH: [action.payload[1], action.payload[3]] };\r\n            state.deckArray = [...deckInstance.getDeck()];\r\n        },\r\n        updateBank: (state, action) => {\r\n            state.bank = action.payload;   \r\n        },\r\n        updatePot1: (state, action) => {\r\n            state.pot1 = action.payload;   \r\n        },\r\n        updatePot2: (state, action) => {\r\n            state.pot2 = action.payload;   \r\n        },\r\n        updatePArray: (state, action) => {\r\n            state.pArray = action.payload;\r\n        },\r\n        updateStatus: (state, action) => {\r\n            state.gameStatus = action.payload;\r\n        },\r\n        updateSplit: (state, action) => {\r\n            state.hand = action.payload[0];\r\n            state.bank = action.payload[1];\r\n            state.pot2 = action.payload[2];\r\n            state.pArray = action.payload[3];\r\n            state.gameStatus.split = true;\r\n        },\r\n        updateHand: (state, action) => {\r\n            state.hand = action.payload;\r\n        },\r\n        flipCard: (state, action) => {\r\n            state.hand.handH[0].faceUp = true;\r\n        },\r\n        resetState: (state, action) => {\r\n            state = initialState;\r\n        }\r\n    },\r\n    extraReducers(builder) {\r\n        builder.addCase(asyncBank.fulfilled, (state, action) => {\r\n            //state.bank = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const { updateDeckArray, dealHand, updateBank, updatePArray, updateStatus, updateSplit, updateHand, updatePot1, updatePot2, resetState, flipCard } = stateSlice.actions;\r\n\r\nexport default stateSlice.reducer;","export const UPDATE_BANK = 'UPDATE_BANK';","import './card.css'\r\nimport React from 'react';\r\n\r\nfunction Card(props) {\r\n    let id = props.card.value + props.card.suit;\r\n    let faceUp = props.card.faceUp;\r\n    let opacity = props.opacity;\r\n    return (faceUp)? (\r\n        <img alt='card' className=\"play-card\" width={61.5} height={87.8} src={process.env.PUBLIC_URL +\"/images/\"+id+\".png\"} style={{opacity: opacity}} ></img>\r\n    ) : (\r\n    <img alt='card' className=\"play-card\" width={61.5} height={87.8} src={process.env.PUBLIC_URL +\"/images/back.png\"} ></img>\r\n    );\r\n};\r\n\r\nexport default Card;","import './bank.css';\r\n\r\nexport let getArray = (money) =>{\r\n\r\n    let hundreds = Math.floor(money / 100);\r\n    money -= hundreds * 100;\r\n    let fiftys = Math.floor(money / 50);\r\n    money -= fiftys * 50;\r\n    let twentyfives = Math.floor(money / 25);\r\n    money -= twentyfives * 25;\r\n    let fives = Math.floor(money / 5);\r\n    money -= fives * 5;\r\n    let ones = money;\r\n\r\n    let mArray = [];\r\n    let chips = [hundreds, fiftys, twentyfives, fives, ones];\r\n    let value = [100, 50, 25, 5, 1];\r\n\r\n    for (let i = 0; i < chips.length; i++) {\r\n        for (let j = 0; j < chips[i]; j++) {\r\n            mArray.push(value[i]);\r\n        }\r\n    }\r\n\r\n    return mArray;\r\n}\r\n\r\nfunction Bank(props) {\r\n\r\n    let bank = props.bank;\r\n    let width = 82.5;\r\n    let height = 75;\r\n    let bet = props.bet;\r\n    let allIn = props.allIn;\r\n    let clearBet = props.clearBet;\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"bank-total col-4\">\r\n                <div className=\"bank-total-text\">\r\n                    <b>Bank:</b> ${bank}\r\n                </div>\r\n                <div className=\"bank-all-in\">\r\n                    {(bank > 0) ? (<button className=\"all-in-button btn btn-success\" onClick={allIn}>\r\n                        ALL IN\r\n                    </button>) : (<button className=\"all-in-button btn btn-success\" onClick={clearBet}>\r\n                        CLEAR BET\r\n                    </button>)}\r\n                </div>\r\n            </div>\r\n            {(bank > 0) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/1.png\"} width={width} height={height} value={1} onClick={bet} className=\"chip btn\"></input>\r\n            </div>) : null}\r\n            {(bank >= 5) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/5.png\"} width={width} height={height} value={5} onClick={bet} className=\"chip btn\"></input>\r\n            </div>) : null}\r\n            {(bank >= 25) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/25.png\"} width={width} height={height} value={25} onClick={bet} className=\"chip btn\"></input>\r\n            </div>) : null}\r\n            {(bank >= 50) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/50.png\"} width={width} height={height} value={50} onClick={bet} className=\"chip btn\"></input>\r\n            </div>) : null}\r\n            {(bank >= 100) ? (<div className=\"bank-chip col-3\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/100.png\"} width={width} height={height} value={100} onClick={bet} className=\"chip-1 btn\"></input>\r\n            </div>) : null}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Bank;\r\n","import './pot.css';\r\nfunction Pot(props) {\r\n\r\n    let pot = props.pot;\r\n    let pArray = props.pArray;\r\n    let chip = pArray[pArray.length - 1];\r\n    let width = 82.5;\r\n    let height = 75;\r\n    let remove = props.remove;\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"pot-title col-6\">\r\n                <b>Pot:</b> ${pot}\r\n            </div>\r\n            {(pArray.length) ? (<div className=\"pot-chip col-6\">\r\n                <input type=\"image\" src={process.env.PUBLIC_URL +\"/images/\" + chip + \".png\"} width={width} height={height} value={chip} onClick={remove} className=\"chip btn\"></input>\r\n            </div>) : <div className=\"col-6\">\r\n                <div className=\"empty-pot\" style={{color: \"white\"}}> YOUR POT <br/>HERE</div>\r\n            </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Pot;","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const Reducer = (state = {\r\n    newBank: 0\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.UPDATE_BANK:\r\n            return {...state, newBank: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { updateBank } from './ActionCreators';\r\nimport { Reducer } from './reducer';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        Reducer, applyMiddleware(thunk)\r\n    )\r\n\r\n    return store;\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateDeckArray, dealHand, deckInstance, updateStatus, updateSplit, updateHand, updatePot1, updatePot2, resetState, updatePArray, flipCard, updateBank, asyncBank } from './stateSlice';\r\nimport { updateNewBank } from '../redux/ActionCreators';\r\nimport './home.css';\r\nimport Card from './card';\r\nimport Deck from './deck';\r\nimport Bank from './bank';\r\nimport Pot from './pot';\r\nimport { getArray } from './bank';\r\nimport { ConfigureStore } from '../redux/configureStore';\r\n\r\n\r\n\r\nconst store = ConfigureStore();\r\n\r\nfunction Double(props) {\r\n    let pots = props.pots;\r\n    if (pots[props.hand] <= props.bank) {\r\n        return (\r\n            <button className=\"btn btn-success col-4\" >(2X)Double </button>\r\n        )\r\n    }\r\n    else return null;\r\n}\r\nfunction Action(props) {\r\n    if (props.deal) {\r\n        return (\r\n            <><button className=\"btn btn-success col-3\" onClick={props.hit}><i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i> Hit</button> <Double pots={props.pots} hand={props.hand} bank={props.bank} /> <button className=\"btn btn-success col-4\" ><i className=\"fa fa-hand-paper-o\" aria-hidden=\"true\"></i> Stand </button></>\r\n        )\r\n    }\r\n    else return null;\r\n}\r\n\r\nfunction Home() {\r\n    // defining selector to import user state from redux store\r\n    const stateSelector = useSelector((state) => state.black);\r\n\r\n    // defining dispatch to send updated user state to redux store\r\n    const dispatch = useDispatch();\r\n\r\n    let { deckArray, hand, bank, pot1, pot2, pArray, gameStatus } = stateSelector;\r\n\r\n\r\n    function getVal(cardArr) {\r\n\r\n        let hasAce = cardArr.some(card => {\r\n            return card.num === 1;\r\n        })\r\n        let minVal = cardArr.reduce((prev, curr) => {\r\n            return { num: prev.num + curr.num };\r\n        })\r\n\r\n        if (!hasAce) return minVal.num;\r\n        else {\r\n            let seenAce = false;\r\n            let maxVal = cardArr.reduce((prev, curr, index) => {\r\n                if (index === 1 && prev.num === 1) {\r\n                    seenAce = true;\r\n                    return { num: 11 + curr.num };\r\n                }\r\n                if (curr.num !== 1 || seenAce) return { num: prev.num + curr.num };\r\n                else {\r\n                    seenAce = true;\r\n                    return { num: prev.num + 11 };\r\n                }\r\n            });\r\n            return (maxVal.num <= 21) ? maxVal.num : minVal.num;\r\n        }\r\n    }\r\n\r\n    function sameVal(hand) {\r\n        return hand[0].num === hand[1].num;\r\n    }\r\n    function isSplit() {\r\n        return gameStatus.deal && gameStatus.split === false && bank >= pot1 && hand.handP1.length === 2 && hand.handP2.length === 0 /*&& sameVal(hand.handP1)*/;\r\n    }\r\n    async function dealHand2(load) {\r\n        dispatch(updateBank(load))\r\n    }\r\n\r\n    function deal() {\r\n        if (deckArray.length < 56) dispatch(updateDeckArray([...deckInstance.getDeck()]));\r\n        dealHand2(12345);\r\n        console.log(bank)\r\n        // let cards = new Array(deckInstance.deal(true), deckInstance.deal(false), deckInstance.deal(true), deckInstance.deal(true));\r\n        // dispatch(dealHand(cards));\r\n        // dispatch(updateStatus({ ...gameStatus, deal: true }));\r\n        // console.log(hand, cards);\r\n    }\r\n\r\n    function split() {\r\n        let newHand = { ...hand, handP1: [hand.handP1[0]], handP2: [hand.handP1[1]] };\r\n        let newBank = bank - pot1;\r\n        let newPot = pot1;\r\n        let newPArray = pArray.concat(getArray(pot1));\r\n\r\n        dispatch(updateSplit([newHand, newBank, newPot, newPArray]));\r\n    }\r\n\r\n    function nextRound() {\r\n        if (bank === 0) {\r\n            alert(\"Game Over!!\");\r\n            dispatch(resetState());\r\n        }\r\n        else {\r\n            dispatch(updateHand({ handP1: [], handP2: [], handH: [] }));\r\n            dispatch(updatePot1(0));\r\n            dispatch(updatePot2(0));\r\n            dispatch(updatePArray([]));\r\n            dispatch(updateStatus({\r\n                deal: false,\r\n                split: false,\r\n                hand: 1,\r\n            }))\r\n        }\r\n    }\r\n\r\n    function compareHand(playerVal, dealerVal, handNum) {\r\n        let pots = { 1: pot1, 2: pot2 };\r\n        let actions = { 1: updatePot1, 2: updatePot2 };\r\n\r\n        if (dealerVal > playerVal) {\r\n            alert(`Hand ${handNum} BUST! You lose $${pots[handNum]}!`)\r\n            dispatch(actions[handNum](0));\r\n        }\r\n        else {\r\n            if (dealerVal < 17) {\r\n                let newHand = hand.handH.concat([deckInstance.deal(true)]);\r\n                dispatch(updateHand({ ...hand, handH: newHand }));\r\n                let newDealerVal = getVal(newHand);\r\n                if (newDealerVal > 21) {\r\n                    alert(`Dealer BUST! You win $${pots[handNum]} for Hand ${handNum}!`);\r\n                    let newBank = bank + (2 * pots[handNum]);\r\n                    dispatch(updateBank(newBank));\r\n                    dispatch(actions[handNum](0));\r\n                }\r\n                else {\r\n                    compareHand(playerVal, getVal(newHand), handNum);\r\n                }\r\n            }\r\n            else if (dealerVal === playerVal) {\r\n                alert(`It's a push/tie for Hand ${handNum}! You keep $${pots[handNum]}!`);\r\n                let newBank = bank + pots[handNum];\r\n                dispatch(updateBank(newBank));\r\n                dispatch(actions[handNum](0));\r\n            }\r\n            else {\r\n                alert(`You win $${pots[handNum]} for Hand ${handNum}!`);\r\n                let newBank = bank + (2 * pots[handNum]);\r\n                dispatch(updateBank(newBank));\r\n                dispatch(actions[handNum](0));\r\n            }\r\n        }\r\n    }\r\n\r\n    function revealHand() {\r\n        dispatch(flipCard());\r\n        let handHVal = getVal(hand.handH);\r\n        let handP1Val = getVal(hand.handP1);\r\n        let handP2Val = (hand.handP2.length) ? getVal(hand.handP2) : 0;\r\n\r\n        if (gameStatus.split) {\r\n            if (pot1 === 0) {\r\n                compareHand(handP2Val, handHVal, 2);\r\n            }\r\n            else if (pot2 === 0) {\r\n                compareHand(handP1Val, handHVal, 1);\r\n            }\r\n            else {\r\n                compareHand(handP2Val, handHVal, 2);\r\n                handHVal = getVal(hand.handH);\r\n                compareHand(handP1Val, handHVal, 1);\r\n            }\r\n        }\r\n        else {\r\n            compareHand(handP1Val, handHVal, 1);\r\n        }\r\n        nextRound();\r\n    }\r\n\r\n    function hit() {\r\n        if (gameStatus.split) {\r\n            if (gameStatus.hand === 1) {\r\n                let newHand = hand.handP1.concat([deckInstance.deal(true)]);\r\n                dispatch(updateHand({ ...hand, handP1: newHand }));\r\n                \r\n                if (getVal(newHand) > 21) {\r\n                    alert(`Hand 1 BUST! You lose $${pot1}!`);\r\n                    dispatch(updatePot1(0));\r\n                    dispatch(updateStatus({ ...gameStatus, hand: 2 }));\r\n                }\r\n                else if (getVal(newHand) === 21) {\r\n                    alert(`You hit 21!`);\r\n                    dispatch(updateStatus({ ...gameStatus, hand: 2 }));\r\n                }\r\n\r\n            }\r\n            else if (gameStatus.hand === 2) {\r\n                let newHand2 = hand.handP2.concat([deckInstance.deal(true)]);\r\n                dispatch(updateHand({ ...hand, handP2: newHand2 }));\r\n\r\n                if (getVal(newHand2) > 21) {\r\n                    alert(`Hand 2 BUST! You lose $${pot2}!`);\r\n                    dispatch(updatePot2(0));\r\n                    if (pot1) revealHand();\r\n                    else {\r\n                        nextRound();\r\n                    }\r\n                }\r\n                else if (getVal(newHand2) === 21) {\r\n                    alert(`You hit 21!`);\r\n                    revealHand();\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (gameStatus.split === false) {\r\n            let newHand = hand.handP1.concat([deckInstance.deal(true)]);\r\n            dispatch(updateHand({ ...hand, handP1: newHand }));\r\n            console.log(hand.handP1)\r\n            alert(\"wait\")\r\n            if (getVal(newHand) > 21) {\r\n                alert(`Hand 1 BUST! You lose $${pot1}!`);\r\n                dispatch(updatePot1(0));\r\n\r\n                nextRound();\r\n            }\r\n            else if (getVal(newHand) === 21) {\r\n                alert(`You hit 21!`);\r\n                revealHand();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    let deck = deckArray.map((card, index) => {\r\n        let cardM = { ...card, faceUp: true }\r\n        return (\r\n            <Card card={cardM} key={index + 'card'} />\r\n        )\r\n    })\r\n    let handP1 = hand.handP1.map((card, i) => {\r\n        return (\r\n            <Card card={card} key={i + 'p0card'} />\r\n        )\r\n    })\r\n    let handP2 = hand.handP2.map((card, i) => {\r\n        return (\r\n            <Card card={card} key={i + 'p1card'} />\r\n        )\r\n    })\r\n    let handH = hand.handH.map((card, i) => {\r\n        return (\r\n            <Card card={card} key={i + 'p1card'} />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"home container\">\r\n            <div className=\"home-items\">\r\n                <div className=\"deck-row row\">\r\n                    <div className=\"deck-pic col-2\">\r\n                        <img alt=\"deck dummy\" width={30} height={35} src={\"/images/dummy.png\"} />\r\n                    </div>\r\n                    <div className=\"total-number col-3\" style={{ color: \"white\" }}>\r\n                        {deckArray.length}\r\n                    </div>\r\n                </div>\r\n                <div className=\"dealer-hand-row row\">\r\n                    <div className=\"dealer-hand-title col-12\">\r\n                        DEALER'S HAND\r\n                    </div>\r\n                    <div className=\"dealer-hand-card col-6\">\r\n                        <div className=\"dealer-cards\" style={{ width: 61.5 + (hand.handH.length - 1) * 11.5 }}>{handH}</div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"player-hand-row row\">\r\n                    <div className=\"player-hand-title col-12\">\r\n                        PLAYER'S HAND\r\n                    </div>\r\n                    <div className=\"player-hand-card col-6\">\r\n                        {handP1}\r\n                    </div>\r\n                    <div className=\"player-hand-card col-6\">\r\n                        {handP2}\r\n                    </div>\r\n                </div>\r\n                <div className=\"action-row row\">\r\n                    {(!gameStatus.deal && pot1) ? (<button className=\"btn btn-info col-3\" onClick={deal}>Deal</button>) : null}\r\n                    <Action pots={{ 1: pot1, 2: pot2 }} hand={gameStatus.hand} bank={bank} deal={gameStatus.deal} hit={hit} />\r\n                    {(isSplit()) ? <button className=\"splt-btn btn btn-success col-7\" onClick={split} >Split</button> : null}\r\n                </div>\r\n                <div className=\"pot-row row\">\r\n                    {(!gameStatus.deal) ? (<Pot bank={bank} pot={pot1} pArray={pArray} />) :\r\n                        <>\r\n                            <div className=\"pot-title col-4\">\r\n                                <b>Pot:</b> ${pot1 + pot2}\r\n                            </div>\r\n                            <div className=\"bank-total-text col-4\">\r\n                                <b>Bank:</b> ${bank}\r\n                            </div>\r\n                        </>}\r\n                </div>\r\n            </div>\r\n            <div className=\"footer row\">\r\n                {(!gameStatus.deal) ? (<Bank bank={bank} pot={pot1} pArray={pArray} />) :\r\n                    null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './home.css';\r\nimport Card from './card';\r\nimport Deck from './deck';\r\nimport Bank from './bank';\r\nimport Pot from './pot';\r\nimport { getArray } from './bank';\r\n\r\n\r\nfunction Double(props) {\r\n    let pots = props.pots;\r\n    let hand = props.hand;\r\n    let status = props.gameStatus.hand;\r\n    if (pots[status] <= props.bank && hand[\"handP\" + status].length === 2) {\r\n        return (\r\n            <button className=\"btn btn-success col-4\" onClick={props.double} >(2X)Double </button>\r\n        )\r\n    }\r\n    else return null;\r\n}\r\nfunction Action(props) {\r\n    if (props.deal) {\r\n        return (\r\n            <><button className=\"btn btn-success col-3\" onClick={props.hit}><i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i> Hit</button> <Double pots={props.pots} gameStatus={props.gameStatus} hand={props.hand} bank={props.bank} double={props.double} /> <button className=\"btn btn-success col-4\" onClick={props.stand}><i className=\"fa fa-hand-paper-o\" aria-hidden=\"true\"></i> Stand </button></>\r\n        )\r\n    }\r\n    else return null;\r\n}\r\n\r\nlet initialState = {\r\n    deckInstance: new Deck(),\r\n    hand: { handP1: [], handP2: [], handH: [] },\r\n    bank: 900,\r\n    pot1: 100,\r\n    pot2: 0,\r\n    lastBet: 100,\r\n    pArray: [100],\r\n    gameStatus: {\r\n        deal: false,\r\n        split: false,\r\n        hand: 1,\r\n        op1: 1,\r\n        op2: 1,\r\n    }\r\n};\r\n\r\nclass Home2 extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = initialState;\r\n        this.deal = this.deal.bind(this);\r\n        this.getVal = this.getVal.bind(this);\r\n        this.sameVal = this.sameVal.bind(this);\r\n        this.isSplit = this.isSplit.bind(this);\r\n        this.split = this.split.bind(this);\r\n        this.nextRound = this.nextRound.bind(this);\r\n        this.compareHand = this.compareHand.bind(this);\r\n        this.revealHand = this.revealHand.bind(this);\r\n        this.hit = this.hit.bind(this);\r\n        this.bet = this.bet.bind(this);\r\n        this.allIn = this.allIn.bind(this);\r\n        this.clearBet = this.clearBet.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.stand = this.stand.bind(this);\r\n        this.double = this.double.bind(this);\r\n    }\r\n\r\n    bet(e) {\r\n        let betMoney = parseInt(e.currentTarget.value);\r\n        this.setState((state, props) => ({ ...state, bank: (state.bank - betMoney), pot1: (state.pot1 + betMoney), pArray: [...state.pArray, betMoney] }));\r\n    }\r\n    allIn() {\r\n        this.setState((state, props) => ({ ...state, bank: 0, pot1: (state.pot1 + state.bank), pArray: getArray(state.pot1 + state.bank) }));\r\n    }\r\n    clearBet() {\r\n        this.setState((state, props) => ({ ...state, bank: (state.pot1 + state.bank), pot1: 0, pArray: [] }));\r\n    }\r\n    remove() {\r\n        let chip = this.state.pArray[this.state.pArray.length - 1];\r\n        this.setState((state, props) => ({ ...state, bank: (chip + state.bank), pot1: (state.pot1 - chip), pArray: state.pArray.slice(0, -1) }));\r\n    }\r\n\r\n    getVal(cardArr) {\r\n\r\n        let hasAce = cardArr.some(card => {\r\n            return card.num === 1;\r\n        })\r\n        let minVal = cardArr.reduce((prev, curr) => {\r\n            return { num: prev.num + curr.num };\r\n        })\r\n\r\n        if (!hasAce) return minVal.num;\r\n        else {\r\n            let seenAce = false;\r\n            let maxVal = cardArr.reduce((prev, curr, index) => {\r\n                if (index === 1 && prev.num === 1) {\r\n                    seenAce = true;\r\n                    return { num: 11 + curr.num };\r\n                }\r\n                if (curr.num !== 1 || seenAce) return { num: prev.num + curr.num };\r\n                else {\r\n                    seenAce = true;\r\n                    return { num: prev.num + 11 };\r\n                }\r\n            });\r\n            return (maxVal.num <= 21) ? maxVal.num : minVal.num;\r\n        }\r\n    }\r\n\r\n    sameVal(hand) {\r\n        return hand[0].num === hand[1].num;\r\n    }\r\n\r\n    isSplit() {\r\n        return this.state.gameStatus.deal && this.state.gameStatus.split === false && this.state.bank >= this.state.pot1 && this.state.hand.handP1.length === 2 && this.state.hand.handP2.length === 0 && this.sameVal(this.state.hand.handP1);\r\n    }\r\n\r\n    deal() {\r\n        if (this.state.deckInstance.getDeck().length < 56) {\r\n            this.setState((state, props) => ({ ...state, deckInstance: new Deck() }), () => {\r\n                let cards = new Array(this.state.deckInstance.deal(true), this.state.deckInstance.deal(false), this.state.deckInstance.deal(true), this.state.deckInstance.deal(true));\r\n\r\n                this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: [cards[0], cards[2]], handH: [cards[1], cards[3]] }, gameStatus: { ...state.gameStatus, deal: true }, lastBet: state.pot1 }), () => {\r\n                    if (this.getVal([cards[0], cards[2]]) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(\"BLACKJACK!!\");\r\n                            this.revealHand();\r\n                        }, 500)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        else {\r\n            let cards = new Array(this.state.deckInstance.deal(true), this.state.deckInstance.deal(false), this.state.deckInstance.deal(true), this.state.deckInstance.deal(true));\r\n\r\n            this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: [cards[0], cards[2]], handH: [cards[1], cards[3]] }, gameStatus: { ...state.gameStatus, deal: true }, lastBet: state.pot1 }), () => {\r\n                if (this.getVal([cards[0], cards[2]]) === 21) {\r\n                    setTimeout(() => {\r\n                        alert(\"BLACKJACK!!\");\r\n                        this.revealHand();\r\n                    }, 500)\r\n                }\r\n            })\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    split() {\r\n\r\n        let newHand = { ...this.state.hand, handP1: [this.state.hand.handP1[0]], handP2: [this.state.hand.handP1[1]] };\r\n        let newBank = this.state.bank - this.state.pot1;\r\n        let newPot = this.state.pot1;\r\n        let newPArray = this.state.pArray.concat(getArray(this.state.pot1));\r\n\r\n        this.setState((state, props) => ({ ...state, hand: newHand, bank: newBank, pot2: newPot, pArray: newPArray, gameStatus: { ...state.gameStatus, split: true, op2: 0.5 } }), () => {\r\n            setTimeout(() => {\r\n                let newCard = this.state.deckInstance.deal(true);\r\n                this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: [...state.hand.handP1, newCard] } }), () => {\r\n                    if (this.getVal(this.state.hand.handP1) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(\"BLACKJACK!!\");\r\n                            let newCard = this.state.deckInstance.deal(true);\r\n                            this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                    alert(\"BLACKJACK!!\");\r\n                                    this.revealHand();\r\n                                }\r\n                            });\r\n                        }, 500)\r\n                    }\r\n                })\r\n            }, 500)\r\n        })\r\n    }\r\n\r\n    nextRound() {\r\n        if (this.state.bank === 0) {\r\n            alert(\"Game Over!!\");\r\n            this.setState({ ...initialState, deckInstance: new Deck() });\r\n        }\r\n        else {\r\n            \r\n            let newBet = (this.state.lastBet<=this.state.bank)? this.state.lastBet : this.state.bank;\r\n            let pArray = getArray(newBet);\r\n            let newBank = this.state.bank - newBet;\r\n            this.setState((state, props) => ({ ...state, hand: { ...initialState.hand }, pot1: newBet, pot2: 0, bank: newBank, pArray: pArray, gameStatus: { ...initialState.gameStatus } }))\r\n        }\r\n    }\r\n\r\n    async compareHand(playerVal, dealerVal, handNum) {\r\n        let pots = { 1: this.state.pot1, 2: this.state.pot2 };\r\n        let actions = { 1: \"1\", 2: \"2\" };\r\n        let P = await new Promise((resolve) => {\r\n            if (dealerVal > playerVal) {\r\n                if (dealerVal <= 21) {\r\n                    alert(`Dealer wins against Hand${handNum}! You lose $${pots[handNum]}!`);\r\n                    this.setState((state, props) => ({ ...state, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                    return resolve(\"loss\");\r\n                }\r\n                else {\r\n                    alert(`Dealer BUST! You win $${pots[handNum]} for Hand ${handNum}!`);\r\n                    let newBank = this.state.bank + (2 * pots[handNum]);\r\n                    this.setState((state, props) => ({ ...state, bank: newBank, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                    return resolve(\"dealer bust you win\");\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (dealerVal < 17) {\r\n                    let newHand = this.state.hand.handH.concat([this.state.deckInstance.deal(true)]);\r\n                    this.setState((state, props) => ({ ...state, hand: { ...state.hand, handH: newHand } }), () => {\r\n                        setTimeout(() => {\r\n                            let newDealerVal = this.getVal(newHand);\r\n                            if (newDealerVal > 21) {\r\n                                alert(`Dealer BUST! You win $${pots[handNum]} for Hand ${handNum}!`);\r\n                                let newBank = this.state.bank + (2 * pots[handNum]);\r\n                                this.setState((state, props) => ({ ...state, bank: newBank, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                                return resolve(\"dealer bust you win\");\r\n                            }\r\n                            else {\r\n                                return resolve(this.compareHand(playerVal, newDealerVal, handNum));\r\n                            }\r\n                        }, 500)\r\n\r\n                    });\r\n\r\n                }\r\n                else if (dealerVal === playerVal) {\r\n                    alert(`It's a push/tie for Hand ${handNum}! You keep $${pots[handNum]}!`);\r\n                    let newBank = this.state.bank + pots[handNum];\r\n                    this.setState((state, props) => ({ ...state, bank: newBank, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                    return resolve(\"tie\");\r\n                }\r\n                else {\r\n                    alert(`You win $${pots[handNum]} for Hand ${handNum}!`);\r\n                    let newBank = this.state.bank + (2 * pots[handNum]);\r\n                    this.setState((state, props) => ({ ...state, bank: newBank, [\"pot\" + actions[handNum]]: 0 }));\r\n\r\n                    return resolve(\"win\");\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n        return P;\r\n\r\n        // await new Promise(resolve => {\r\n        //     setTimeout(resolve, 0)\r\n        // })\r\n    }\r\n\r\n    revealHand() {\r\n        this.setState((state, props) =>\r\n            ({ ...state, hand: { ...state.hand, handH: [{ ...state.hand.handH[0], faceUp: true }, state.hand.handH[1]] } }), () => {\r\n\r\n                let handHVal = this.getVal(this.state.hand.handH);\r\n                let handP1Val = this.getVal(this.state.hand.handP1);\r\n                let handP2Val = (this.state.hand.handP2.length) ? this.getVal(this.state.hand.handP2) : 0;\r\n\r\n                setTimeout(() => {\r\n                    if (this.state.gameStatus.split) {\r\n                        if (this.state.pot1 === 0) {\r\n                            this.compareHand(handP2Val, handHVal, 2).then((resp) => {\r\n                                this.nextRound();\r\n                            });\r\n                        }\r\n                        else if (this.state.pot2 === 0) {\r\n                            this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, op2: 0.5, op1: 1 } }), () => {\r\n                                this.compareHand(handP1Val, handHVal, 1).then((resp) => {\r\n                                    this.nextRound();\r\n                                });\r\n                            })\r\n                        }\r\n                        else {\r\n                            this.compareHand(handP2Val, handHVal, 2).then(() => {\r\n                                handHVal = this.getVal(this.state.hand.handH);\r\n                                this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, op2: 0.5, op1: 1 } }), () => {\r\n                                    setTimeout(() => {\r\n                                        this.compareHand(handP1Val, handHVal, 1).then((resp) => {\r\n                                            this.nextRound();\r\n                                        });\r\n                                    }, 500)\r\n                                })\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.compareHand(handP1Val, handHVal, 1).then((resp) => {\r\n                            this.nextRound();\r\n                        });\r\n                    }\r\n                }, 500)\r\n            });\r\n    }\r\n\r\n    hit() {\r\n        if (this.state.gameStatus.split) {\r\n            if (this.state.gameStatus.hand === 1) {\r\n                let newHand = this.state.hand.handP1.concat([this.state.deckInstance.deal(true)]);\r\n                this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: newHand } }), () => {\r\n                    if (this.getVal(newHand) > 21) {\r\n                        setTimeout(() => {\r\n                            alert(`Hand 1 BUST! You lose $${this.state.pot1}!`);\r\n                            let newCard = this.state.deckInstance.deal(true);\r\n                            this.setState((state, props) => ({ ...state, pot1: 0, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                    setTimeout(() => {\r\n                                        alert(\"BLACKJACK!!\");\r\n                                        this.revealHand();\r\n                                    }, 500)\r\n                                }\r\n                            })\r\n                        }, 500)\r\n\r\n                    }\r\n                    else if (this.getVal(newHand) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(`You hit 21!`);\r\n                            let newCard = this.state.deckInstance.deal(true);\r\n                            this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                    setTimeout(() => {\r\n                                        alert(\"BLACKJACK!!\");\r\n                                        this.revealHand();\r\n                                    }, 500)\r\n                                }\r\n                            })\r\n                        }, 500)\r\n                    }\r\n                });\r\n\r\n            }\r\n            else if (this.state.gameStatus.hand === 2) {\r\n                let newHand2 = this.state.hand.handP2.concat([this.state.deckInstance.deal(true)]);\r\n                this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP2: newHand2 } }), () => {\r\n                    if (this.getVal(newHand2) > 21) {\r\n                        setTimeout(() => {\r\n                            alert(`Hand 2 BUST! You lose $${this.state.pot2}!`);\r\n                            this.setState((state, props) => ({ ...state, pot2: 0 }), () => {\r\n                                if (this.state.pot1) {\r\n                                    this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, op1: 1, op2: 0.5 } }), () => {\r\n                                        this.revealHand();\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    this.nextRound();\r\n                                }\r\n                            })\r\n                        }, 500)\r\n\r\n                    }\r\n                    else if (this.getVal(newHand2) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(`You hit 21!`);\r\n                            this.revealHand();\r\n                        }, 500)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else if (this.state.gameStatus.split === false) {\r\n            let newHand = this.state.hand.handP1.concat([this.state.deckInstance.deal(true)]);\r\n            this.setState((state, props) => ({ ...state, hand: { ...state.hand, handP1: newHand } }), () => {\r\n                if (this.getVal(newHand) > 21) {\r\n                    setTimeout(() => {\r\n                        alert(`Hand 1 BUST! You lose $${this.state.pot1}!`);\r\n                        this.setState((state, props) => ({ ...state, pot1: 0 }), () => {\r\n                            this.nextRound();\r\n                        });\r\n                    }, 500)\r\n                }\r\n                else if (this.getVal(newHand) === 21) {\r\n                    setTimeout(() => {\r\n                        alert(`You hit 21!`);\r\n                        this.revealHand();\r\n                    }, 500)\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    stand() {\r\n        if (!this.state.gameStatus.split) {\r\n            this.revealHand();\r\n        }\r\n        else {\r\n            if (this.state.gameStatus.hand === 2) this.revealHand();\r\n            else {\r\n                let newCard = this.state.deckInstance.deal(true);\r\n                this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                    if (this.getVal(this.state.hand.handP2) === 21) {\r\n                        setTimeout(() => {\r\n                            alert(\"BLACKJACK!!\");\r\n                            this.revealHand();\r\n                        }, 500)\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    double() {\r\n        if (this.state.gameStatus.split) {\r\n            if (this.state.gameStatus.hand === 1) {\r\n                let newCard = this.state.deckInstance.deal(true);\r\n                let newPot = 2 * this.state.pot1;\r\n                let newBank = this.state.bank - this.state.pot1;\r\n                this.setState((state, props) => ({ ...state, pot1: newPot, bank: newBank, hand: { ...state.hand, handP1: [...state.hand.handP1, newCard] } }), () => {\r\n                    if (this.getVal(this.state.hand.handP1) >= 21) {\r\n                        setTimeout(() => {\r\n                            if (this.getVal(this.state.hand.handP1) > 21) {\r\n                                alert(`Hand 1 BUST! You lose $${this.state.pot1}!`);\r\n                                let newCard = this.state.deckInstance.deal(true);\r\n                                this.setState((state, props) => ({ ...state, pot1: 0, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                    if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                        setTimeout(() => {\r\n                                            alert(\"BLACKJACK!!\");\r\n                                            this.revealHand();\r\n                                        }, 500)\r\n                                    }\r\n                                })\r\n                            }\r\n                            else if (this.getVal(this.state.hand.handP1) === 21) {\r\n                                alert(`You hit 21!`);\r\n                                let newCard = this.state.deckInstance.deal(true);\r\n                                this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                                    if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                        setTimeout(() => {\r\n                                            alert(\"BLACKJACK!!\");\r\n                                            this.revealHand();\r\n                                        }, 500)\r\n                                    }\r\n                                })\r\n                            }\r\n                        }, 500)\r\n                    }\r\n                    else {\r\n                        let newCard = this.state.deckInstance.deal(true);\r\n                        this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, hand: 2, op1: 0.5, op2: 1 }, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                            if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                setTimeout(() => {\r\n                                    alert(\"BLACKJACK!!\");\r\n                                    this.revealHand();\r\n                                }, 500)\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n            else if (this.state.gameStatus.hand === 2) {\r\n                let newCard = this.state.deckInstance.deal(true);\r\n                let newPot = 2 * this.state.pot2;\r\n                let newBank = this.state.bank - this.state.pot2;\r\n                this.setState((state, props) => ({ ...state, pot2: newPot, bank: newBank, hand: { ...state.hand, handP2: [...state.hand.handP2, newCard] } }), () => {\r\n                    if (this.getVal(this.state.hand.handP2) >= 21) {\r\n                        setTimeout(() => {\r\n                            if (this.getVal(this.state.hand.handP2) > 21) {\r\n                                alert(`Hand 2 BUST! You lose $${this.state.pot2}!`);\r\n                                this.setState((state, props) => ({ ...state, pot2: 0 }), () => {\r\n                                    if (this.state.pot1) {\r\n                                        this.setState((state, props) => ({ ...state, gameStatus: { ...state.gameStatus, op1: 1, op2: 0.5 } }), () => {\r\n                                            this.revealHand();\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        this.nextRound();\r\n                                    }\r\n                                })\r\n                            }\r\n                            else if (this.getVal(this.state.hand.handP2) === 21) {\r\n                                alert(`You hit 21!`);\r\n                                this.revealHand();\r\n                            }\r\n                        }, 500)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else if (!this.state.gameStatus.split) {\r\n            let newCard = this.state.deckInstance.deal(true);\r\n            let newPot = 2 * this.state.pot1;\r\n            let newBank = this.state.bank - this.state.pot1;\r\n            this.setState((state, props) => ({ ...state, pot1: newPot, bank: newBank, hand: { ...state.hand, handP1: [...state.hand.handP1, newCard] } }), () => {\r\n                if (this.getVal(this.state.hand.handP1) >= 21) {\r\n                    setTimeout(() => {\r\n                        if (this.getVal(this.state.hand.handP1) > 21) {\r\n                            alert(`Hand 1 BUST! You lose $${this.state.pot1}!`);\r\n                            this.setState((state, props) => ({ ...state, pot1: 0 }), () => {\r\n                                this.nextRound();\r\n                            })\r\n                        }\r\n                        else if (this.getVal(this.state.hand.handP1) === 21) {\r\n                            alert(`You hit 21!`);\r\n                            this.revealHand();\r\n                        }\r\n                    }, 500)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let handP1 = this.state.hand.handP1.map((card, i) => {\r\n            return (\r\n                <Card card={card} key={i + 'p0card'} opacity={this.state.gameStatus.op1} />\r\n            )\r\n        });\r\n        let handP2 = this.state.hand.handP2.map((card, i) => {\r\n            return (\r\n                <Card card={card} key={i + 'p1card'} opacity={this.state.gameStatus.op2} />\r\n            )\r\n        });\r\n        let handH = this.state.hand.handH.map((card, i) => {\r\n            return (\r\n                <Card card={card} key={i + 'p1card'} />\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div className=\"home container\">\r\n                <div className=\"home-items\">\r\n                    <div className=\"deck-row row\">\r\n                        <div className=\"game-banner col-7\">\r\n                            <img alt=\"game banner\" height={35} width={180} src={process.env.PUBLIC_URL +\"/images/banner.png\"}/>\r\n                        </div>\r\n                        <div className=\"deck-pic col-2\">\r\n                            <img alt=\"deck dummy\" width={30} height={35} src={process.env.PUBLIC_URL +\"/images/dummy.png\"} />\r\n                        </div>\r\n                        <div className=\"total-number col-3\" style={{ color: \"white\" }}>\r\n                            {this.state.deckInstance.getDeck().length}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dealer-hand-row row\">\r\n                        <div className=\"dealer-hand-title col-12\">\r\n                            DEALER'S HAND\r\n                        </div>\r\n                        <div className=\"dealer-hand-card col-6\">\r\n                            <div className=\"dealer-cards\" style={{ width: 61.5 + (this.state.hand.handH.length - 1) * 11.5 }}>{handH}</div>\r\n                            {(this.state.hand.handH.length && this.state.hand.handH[0].faceUp) ? (<div className=\"dealer-hand-total\">\r\n                                TOTAL: {this.getVal(this.state.hand.handH)}\r\n                            </div>) : null}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"player-hand-row row\">\r\n                        <div className=\"player-hand-title col-12\">\r\n                            PLAYER'S HAND\r\n                        </div>\r\n                        <div className=\"player-hand-card col-6\">\r\n                            {handP1}\r\n                            {(this.state.hand.handP1.length) ? (<div className=\"player-hand-total\">\r\n                                TOTAL: {this.getVal(this.state.hand.handP1)}\r\n                            </div>) : null}\r\n                            {(this.state.hand.handP1.length) ? (<div className=\"player-hand-value\">\r\n                                VALUE: {(this.getVal(this.state.hand.handP1) <= 21) ? <span>${this.state.pot1}</span> : <span>BUST!</span>}\r\n                            </div>) : null}\r\n                        </div>\r\n                        <div className=\"player-hand-card col-6\">\r\n                            {handP2}\r\n                            {(this.state.hand.handP2.length) ? (<div className=\"player-hand-total\">\r\n                                TOTAL: {this.getVal(this.state.hand.handP2)}\r\n                            </div>) : null}\r\n                            {(this.state.hand.handP2.length) ? (<div className=\"player-hand-value\">\r\n                                VALUE: {(this.getVal(this.state.hand.handP2) <= 21) ? <span>${this.state.pot2}</span> : <span>BUST!</span>}\r\n                            </div>) : null}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"action-row row\">\r\n                        {(!this.state.gameStatus.deal && this.state.pot1) ? (<button className=\"btn btn-info col-3\" onClick={this.deal}>Deal</button>) : null}\r\n                        <Action pots={{ 1: this.state.pot1, 2: this.state.pot2 }} gameStatus={this.state.gameStatus} hand={this.state.hand} bank={this.state.bank} deal={this.state.gameStatus.deal} hit={this.hit} stand={this.stand} double={this.double} />\r\n                        {(this.isSplit()) ? <button className=\"splt-btn btn btn-success col-7\" onClick={this.split} >Split</button> : null}\r\n                    </div>\r\n                    <div className=\"pot-row row\">\r\n                        {(!this.state.gameStatus.deal) ? (<Pot bank={this.state.bank} pot={this.state.pot1} pArray={this.state.pArray} remove={this.remove} />) :\r\n                            <>\r\n                                <div className=\"pot-title col-4\">\r\n                                    <b>Pot:</b> ${this.state.pot1 + this.state.pot2}\r\n                                </div>\r\n                                <div className=\"bank-total-text col-4\">\r\n                                    <b>Bank:</b> ${this.state.bank}\r\n                                </div>\r\n                            </>}\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer row\">\r\n                    {(!this.state.gameStatus.deal) ? (<Bank bank={this.state.bank} pot={this.state.pot1} pArray={this.state.pArray} allIn={this.allIn} clearBet={this.clearBet} bet={this.bet} />) :\r\n                        null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home2;","import { Provider } from 'react-redux';\nimport './App.css';\nimport Home from './components/home';\nimport { ConfigureStore } from './redux/configureStore';\nimport Home2\n from './components/home2';\nconst store = ConfigureStore();\n\nfunction App() {\n  return (\n    \n      <div className=\"App\">\n        <Home2 />\n      </div>\n    \n\n  );\n}\n\nexport default App;\n","import { configureStore  } from \"@reduxjs/toolkit\";\r\nimport stateReducer from './stateSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        black: stateReducer\r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './components/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}